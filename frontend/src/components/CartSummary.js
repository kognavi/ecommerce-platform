"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CartSummary = CartSummary;
// src/components/CartSummary.tsx
const CartContext_1 = require("../contexts/CartContext");
function CartSummary() {
    const { items, getTotalQuantity, getTotalPrice, removeItem, updateQuantity } = (0, CartContext_1.useCart)();
    if (items.length === 0) {
        return <div className="text-gray-500">カートは空です</div>;
    }
    return (<div className="space-y-4">
      {items.map(item => (<div key={item.product.id} className="flex items-center gap-4">
          <img src={item.product.image} alt={item.product.title} className="w-16 h-16 object-cover rounded"/>
          <div className="flex-1">
            <h4 className="font-semibold">{item.product.title}</h4>
            <p className="text-gray-600">¥{item.product.price.toLocaleString()}</p>
          </div>
          <div className="flex items-center gap-2">
            <button onClick={() => updateQuantity(item.product.id, item.quantity - 1)} className="px-2 py-1 bg-gray-200 rounded">
              -
            </button>
            <span>{item.quantity}</span>
            <button onClick={() => updateQuantity(item.product.id, item.quantity + 1)} className="px-2 py-1 bg-gray-200 rounded">
              +
            </button>
            <button onClick={() => removeItem(item.product.id)} className="text-red-600">
              削除
            </button>
          </div>
        </div>))}
      <div className="border-t pt-4">
        <p className="text-lg font-semibold">
          合計: ¥{getTotalPrice().toLocaleString()} ({getTotalQuantity()}点)
        </p>
      </div>
    </div>);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FydFN1bW1hcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJDYXJ0U3VtbWFyeS50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSxrQ0FrREM7QUFyREQsaUNBQWlDO0FBQ2pDLHlEQUFpRDtBQUVqRCxTQUFnQixXQUFXO0lBQ3pCLE1BQU0sRUFBRSxLQUFLLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsR0FBRyxJQUFBLHFCQUFPLEdBQUUsQ0FBQTtJQUV4RixJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUNyRCxDQUFDO0lBRUQsT0FBTyxDQUNMLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQ3hCO01BQUEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FDakIsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMseUJBQXlCLENBQzVEO1VBQUEsQ0FBQyxHQUFHLENBQ0YsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FDeEIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FDeEIsU0FBUyxDQUFDLGdDQUFnQyxFQUU1QztVQUFBLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQ3JCO1lBQUEsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUN0RDtZQUFBLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUN4RTtVQUFBLEVBQUUsR0FBRyxDQUNMO1VBQUEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUN0QztZQUFBLENBQUMsTUFBTSxDQUNMLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQ2xFLFNBQVMsQ0FBQywrQkFBK0IsQ0FFekM7O1lBQ0YsRUFBRSxNQUFNLENBQ1I7WUFBQSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLENBQzNCO1lBQUEsQ0FBQyxNQUFNLENBQ0wsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FDbEUsU0FBUyxDQUFDLCtCQUErQixDQUV6Qzs7WUFDRixFQUFFLE1BQU0sQ0FDUjtZQUFBLENBQUMsTUFBTSxDQUNMLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQzNDLFNBQVMsQ0FBQyxjQUFjLENBRXhCOztZQUNGLEVBQUUsTUFBTSxDQUNWO1VBQUEsRUFBRSxHQUFHLENBQ1A7UUFBQSxFQUFFLEdBQUcsQ0FBQyxDQUNQLENBQUMsQ0FDRjtNQUFBLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQzVCO1FBQUEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLHVCQUF1QixDQUNsQztlQUFLLENBQUMsYUFBYSxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUUsRUFBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDL0QsRUFBRSxDQUFDLENBQ0w7TUFBQSxFQUFFLEdBQUcsQ0FDUDtJQUFBLEVBQUUsR0FBRyxDQUFDLENBQ1AsQ0FBQTtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvY29tcG9uZW50cy9DYXJ0U3VtbWFyeS50c3hcbmltcG9ydCB7IHVzZUNhcnQgfSBmcm9tICcuLi9jb250ZXh0cy9DYXJ0Q29udGV4dCdcblxuZXhwb3J0IGZ1bmN0aW9uIENhcnRTdW1tYXJ5KCkge1xuICBjb25zdCB7IGl0ZW1zLCBnZXRUb3RhbFF1YW50aXR5LCBnZXRUb3RhbFByaWNlLCByZW1vdmVJdGVtLCB1cGRhdGVRdWFudGl0eSB9ID0gdXNlQ2FydCgpXG5cbiAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInRleHQtZ3JheS01MDBcIj7jgqvjg7zjg4jjga/nqbrjgafjgZk8L2Rpdj5cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTRcIj5cbiAgICAgIHtpdGVtcy5tYXAoaXRlbSA9PiAoXG4gICAgICAgIDxkaXYga2V5PXtpdGVtLnByb2R1Y3QuaWR9IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC00XCI+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgc3JjPXtpdGVtLnByb2R1Y3QuaW1hZ2V9XG4gICAgICAgICAgICBhbHQ9e2l0ZW0ucHJvZHVjdC50aXRsZX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInctMTYgaC0xNiBvYmplY3QtY292ZXIgcm91bmRlZFwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtMVwiPlxuICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT1cImZvbnQtc2VtaWJvbGRcIj57aXRlbS5wcm9kdWN0LnRpdGxlfTwvaDQ+XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LWdyYXktNjAwXCI+wqV7aXRlbS5wcm9kdWN0LnByaWNlLnRvTG9jYWxlU3RyaW5nKCl9PC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdXBkYXRlUXVhbnRpdHkoaXRlbS5wcm9kdWN0LmlkLCBpdGVtLnF1YW50aXR5IC0gMSl9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInB4LTIgcHktMSBiZy1ncmF5LTIwMCByb3VuZGVkXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgLVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8c3Bhbj57aXRlbS5xdWFudGl0eX08L3NwYW4+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHVwZGF0ZVF1YW50aXR5KGl0ZW0ucHJvZHVjdC5pZCwgaXRlbS5xdWFudGl0eSArIDEpfVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJweC0yIHB5LTEgYmctZ3JheS0yMDAgcm91bmRlZFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICtcbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiByZW1vdmVJdGVtKGl0ZW0ucHJvZHVjdC5pZCl9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRleHQtcmVkLTYwMFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIOWJiumZpFxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKSl9XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImJvcmRlci10IHB0LTRcIj5cbiAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1sZyBmb250LXNlbWlib2xkXCI+XG4gICAgICAgICAg5ZCI6KiIOiDCpXtnZXRUb3RhbFByaWNlKCkudG9Mb2NhbGVTdHJpbmcoKX0gKHtnZXRUb3RhbFF1YW50aXR5KCl954K5KVxuICAgICAgICA8L3A+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuIl19