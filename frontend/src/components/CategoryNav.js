"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CategoryNav = CategoryNav;
// src/components/CategoryNav.tsx
const react_1 = require("react");
const lucide_react_1 = require("lucide-react");
const Icons = require("lucide-react");
function CategoryNav({ categories, onSelectCategory, selectedCategory }) {
    const [expandedCategories, setExpandedCategories] = (0, react_1.useState)([]);
    const toggleCategory = (categoryId) => {
        setExpandedCategories(prev => prev.includes(categoryId)
            ? prev.filter(id => id !== categoryId)
            : [...prev, categoryId]);
    };
    const renderCategory = (category, level = 0) => {
        const isExpanded = expandedCategories.includes(category.id);
        const isSelected = selectedCategory === category.id;
        const IconComponent = Icons[category.icon];
        return (<div key={category.id} className="w-full">
        <button onClick={() => {
                onSelectCategory(category.id);
                if (category.subcategories?.length) {
                    toggleCategory(category.id);
                }
            }} className={`
            w-full flex items-center px-4 py-2 text-left
            ${isSelected ? 'bg-blue-50 text-blue-600' : 'hover:bg-gray-50'}
            ${level > 0 ? 'pl-' + (level * 4 + 4) : ''}
          `}>
          <IconComponent className="w-5 h-5 mr-2"/>
          <span className="flex-1">{category.name}</span>
          {category.subcategories?.length > 0 && (isExpanded ? (<lucide_react_1.ChevronDown className="w-4 h-4"/>) : (<lucide_react_1.ChevronRight className="w-4 h-4"/>))}
        </button>
        
        {isExpanded && category.subcategories?.map(subcategory => renderCategory(subcategory, level + 1))}
      </div>);
    };
    return (<div className="w-64 bg-white shadow rounded-lg overflow-hidden">
      <div className="p-4 border-b">
        <h2 className="font-semibold text-lg">カテゴリー</h2>
      </div>
      <div className="py-2">
        {categories.map(category => renderCategory(category))}
      </div>
    </div>);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2F0ZWdvcnlOYXYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJDYXRlZ29yeU5hdi50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFZQSxrQ0ErREM7QUEzRUQsaUNBQWlDO0FBQ2pDLGlDQUFnQztBQUNoQywrQ0FBd0Q7QUFDeEQsc0NBQXFDO0FBU3JDLFNBQWdCLFdBQVcsQ0FBQyxFQUMxQixVQUFVLEVBQ1YsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNDO0lBQ2pCLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxxQkFBcUIsQ0FBQyxHQUFHLElBQUEsZ0JBQVEsRUFBVyxFQUFFLENBQUMsQ0FBQTtJQUUxRSxNQUFNLGNBQWMsR0FBRyxDQUFDLFVBQWtCLEVBQUUsRUFBRTtRQUM1QyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUMzQixJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztZQUN2QixDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxVQUFVLENBQUM7WUFDdEMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQzFCLENBQUE7SUFDSCxDQUFDLENBQUE7SUFFRCxNQUFNLGNBQWMsR0FBRyxDQUFDLFFBQWtCLEVBQUUsUUFBZ0IsQ0FBQyxFQUFFLEVBQUU7UUFDL0QsTUFBTSxVQUFVLEdBQUcsa0JBQWtCLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUMzRCxNQUFNLFVBQVUsR0FBRyxnQkFBZ0IsS0FBSyxRQUFRLENBQUMsRUFBRSxDQUFBO1FBQ25ELE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBMEIsQ0FBQyxDQUFBO1FBRWhFLE9BQU8sQ0FDTCxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FDdkM7UUFBQSxDQUFDLE1BQU0sQ0FDTCxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ1osZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFBO2dCQUM3QixJQUFJLFFBQVEsQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLENBQUM7b0JBQ25DLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUE7Z0JBQzdCLENBQUM7WUFDSCxDQUFDLENBQUMsQ0FDRixTQUFTLENBQUMsQ0FBQzs7Y0FFUCxVQUFVLENBQUMsQ0FBQyxDQUFDLDBCQUEwQixDQUFDLENBQUMsQ0FBQyxrQkFBa0I7Y0FDNUQsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtXQUMzQyxDQUFDLENBRUY7VUFBQSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUN2QztVQUFBLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUM5QztVQUFBLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQ3JDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FDWCxDQUFDLDBCQUFXLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRyxDQUNwQyxDQUFDLENBQUMsQ0FBQyxDQUNGLENBQUMsMkJBQVksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFHLENBQ3JDLENBQ0YsQ0FDSDtRQUFBLEVBQUUsTUFBTSxDQUVSOztRQUFBLENBQUMsVUFBVSxJQUFJLFFBQVEsQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQ3ZELGNBQWMsQ0FBQyxXQUFXLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUN2QyxDQUNIO01BQUEsRUFBRSxHQUFHLENBQUMsQ0FDUCxDQUFBO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsT0FBTyxDQUNMLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxpREFBaUQsQ0FDOUQ7TUFBQSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUMzQjtRQUFBLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUNqRDtNQUFBLEVBQUUsR0FBRyxDQUNMO01BQUEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FDbkI7UUFBQSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FDdkQ7TUFBQSxFQUFFLEdBQUcsQ0FDUDtJQUFBLEVBQUUsR0FBRyxDQUFDLENBQ1AsQ0FBQTtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvY29tcG9uZW50cy9DYXRlZ29yeU5hdi50c3hcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBDaGV2cm9uRG93biwgQ2hldnJvblJpZ2h0IH0gZnJvbSAnbHVjaWRlLXJlYWN0J1xuaW1wb3J0ICogYXMgSWNvbnMgZnJvbSAnbHVjaWRlLXJlYWN0J1xuaW1wb3J0IHsgQ2F0ZWdvcnkgfSBmcm9tICcuLi90eXBlcy9jYXRlZ29yeSdcblxuaW50ZXJmYWNlIENhdGVnb3J5TmF2UHJvcHMge1xuICBjYXRlZ29yaWVzOiBDYXRlZ29yeVtdXG4gIG9uU2VsZWN0Q2F0ZWdvcnk6IChjYXRlZ29yeUlkOiBzdHJpbmcpID0+IHZvaWRcbiAgc2VsZWN0ZWRDYXRlZ29yeTogc3RyaW5nIHwgbnVsbFxufVxuXG5leHBvcnQgZnVuY3Rpb24gQ2F0ZWdvcnlOYXYoeyBcbiAgY2F0ZWdvcmllcywgXG4gIG9uU2VsZWN0Q2F0ZWdvcnksIFxuICBzZWxlY3RlZENhdGVnb3J5IFxufTogQ2F0ZWdvcnlOYXZQcm9wcykge1xuICBjb25zdCBbZXhwYW5kZWRDYXRlZ29yaWVzLCBzZXRFeHBhbmRlZENhdGVnb3JpZXNdID0gdXNlU3RhdGU8c3RyaW5nW10+KFtdKVxuXG4gIGNvbnN0IHRvZ2dsZUNhdGVnb3J5ID0gKGNhdGVnb3J5SWQ6IHN0cmluZykgPT4ge1xuICAgIHNldEV4cGFuZGVkQ2F0ZWdvcmllcyhwcmV2ID0+XG4gICAgICBwcmV2LmluY2x1ZGVzKGNhdGVnb3J5SWQpXG4gICAgICAgID8gcHJldi5maWx0ZXIoaWQgPT4gaWQgIT09IGNhdGVnb3J5SWQpXG4gICAgICAgIDogWy4uLnByZXYsIGNhdGVnb3J5SWRdXG4gICAgKVxuICB9XG5cbiAgY29uc3QgcmVuZGVyQ2F0ZWdvcnkgPSAoY2F0ZWdvcnk6IENhdGVnb3J5LCBsZXZlbDogbnVtYmVyID0gMCkgPT4ge1xuICAgIGNvbnN0IGlzRXhwYW5kZWQgPSBleHBhbmRlZENhdGVnb3JpZXMuaW5jbHVkZXMoY2F0ZWdvcnkuaWQpXG4gICAgY29uc3QgaXNTZWxlY3RlZCA9IHNlbGVjdGVkQ2F0ZWdvcnkgPT09IGNhdGVnb3J5LmlkXG4gICAgY29uc3QgSWNvbkNvbXBvbmVudCA9IEljb25zW2NhdGVnb3J5Lmljb24gYXMga2V5b2YgdHlwZW9mIEljb25zXVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYga2V5PXtjYXRlZ29yeS5pZH0gY2xhc3NOYW1lPVwidy1mdWxsXCI+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICBvblNlbGVjdENhdGVnb3J5KGNhdGVnb3J5LmlkKVxuICAgICAgICAgICAgaWYgKGNhdGVnb3J5LnN1YmNhdGVnb3JpZXM/Lmxlbmd0aCkge1xuICAgICAgICAgICAgICB0b2dnbGVDYXRlZ29yeShjYXRlZ29yeS5pZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9fVxuICAgICAgICAgIGNsYXNzTmFtZT17YFxuICAgICAgICAgICAgdy1mdWxsIGZsZXggaXRlbXMtY2VudGVyIHB4LTQgcHktMiB0ZXh0LWxlZnRcbiAgICAgICAgICAgICR7aXNTZWxlY3RlZCA/ICdiZy1ibHVlLTUwIHRleHQtYmx1ZS02MDAnIDogJ2hvdmVyOmJnLWdyYXktNTAnfVxuICAgICAgICAgICAgJHtsZXZlbCA+IDAgPyAncGwtJyArIChsZXZlbCAqIDQgKyA0KSA6ICcnfVxuICAgICAgICAgIGB9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbkNvbXBvbmVudCBjbGFzc05hbWU9XCJ3LTUgaC01IG1yLTJcIiAvPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZsZXgtMVwiPntjYXRlZ29yeS5uYW1lfTwvc3Bhbj5cbiAgICAgICAgICB7Y2F0ZWdvcnkuc3ViY2F0ZWdvcmllcz8ubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgICAgICBpc0V4cGFuZGVkID8gKFxuICAgICAgICAgICAgICA8Q2hldnJvbkRvd24gY2xhc3NOYW1lPVwidy00IGgtNFwiIC8+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8Q2hldnJvblJpZ2h0IGNsYXNzTmFtZT1cInctNCBoLTRcIiAvPlxuICAgICAgICAgICAgKVxuICAgICAgICAgICl9XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICBcbiAgICAgICAge2lzRXhwYW5kZWQgJiYgY2F0ZWdvcnkuc3ViY2F0ZWdvcmllcz8ubWFwKHN1YmNhdGVnb3J5ID0+XG4gICAgICAgICAgcmVuZGVyQ2F0ZWdvcnkoc3ViY2F0ZWdvcnksIGxldmVsICsgMSlcbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ3LTY0IGJnLXdoaXRlIHNoYWRvdyByb3VuZGVkLWxnIG92ZXJmbG93LWhpZGRlblwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTQgYm9yZGVyLWJcIj5cbiAgICAgICAgPGgyIGNsYXNzTmFtZT1cImZvbnQtc2VtaWJvbGQgdGV4dC1sZ1wiPuOCq+ODhuOCtOODquODvDwvaDI+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHktMlwiPlxuICAgICAgICB7Y2F0ZWdvcmllcy5tYXAoY2F0ZWdvcnkgPT4gcmVuZGVyQ2F0ZWdvcnkoY2F0ZWdvcnkpKX1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG59XG4iXX0=